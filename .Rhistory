demo()
library('graphics')
demo(graphics)
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
warnings()
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
installed.packages()
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p=0.50, list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(975)
inTrain=createDataPartition(mixtures$CompressiveStre gtn, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
data(concrete)
set.seed(975)
inTrain=createDataPartition(mixtures$CompressiveStrengtn, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
inTrain=createDataPartition(mixtures$CompressiveStrengtn, p=3/4)[[1]]
inTrain=createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
c2 = cutTwo(training, 4)
c2 = cut2(training$CompressiveStrength, g=4)
library(HMisc)
install.packages("HMisc")
library(Hmisc)
c2 = cut2(training$CompressiveStrength, g=4)
table(c2)
columns(training)
sapply(class, training)
sapply(training, class)
as.numeric(row.names(training))
plot(training#CompressiveStrength,  as.numeric(row.names(training)))
;
plot(training$CompressiveStrength,  as.numeric(row.names(training)), color=training$CompressiveStrength)
plot(as.numeric(row.names(training)), training$CompressiveStrength color=training$CompressiveStrength)
plot(as.numeric(row.names(training)), training$CompressiveStrength, color=training$CompressiveStrength)
c2 = cut2(training$CompressiveStrength, g=5
plot(as.numeric(row.names(training)), c2, color=c2)
plot(as.numeric(row.names(training)), c2, color=c2)
plot(as.numeric(row.names(training)), training$Age, color=c2)
plot(training$Age, as.numeric(row.names(training)), color=c2)
sapply(training, class)
training$Cement
sapply(training, class)
plot(as.numeric(row.names(training)), training$CompressiveStrength, color=cut2(Cement))
plot(as.numeric(row.names(training)), training$CompressiveStrength, color=cut2(training(Cement)))
plot(as.numeric(row.names(training)), training$CompressiveStrength, color=cut2(training$Cement))
plot(as.numeric(row.names(training)), training$CompressiveStrength, colour=cut2(training$Cement))
plot(as.numeric(row.names(training)), CompressiveStrength, colour=cut2(Cement), data=training)
warnings()
plot(as.numeric(row.names(training)), CompressiveStrength, color=cut2(Cement), data=training)
plot(as.numeric(row.names(training)), training$CompressiveStrength, color=cut2(Cement), data=training)
plot(as.numeric(row.names(training)), training$CompressiveStrength, color=cut2(training$Cement), data=training)
warnings()
?plot
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Cement), data=training)
sapply(training, class)
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag,g=5))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$FlyAsh,g=5))
summary(training$FlyAsh)
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$FlyAsh,g=3))
summary(training$Water)
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Water,g=34)
()
)
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Water,g=4))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Superplasticizer,g=4))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$CoarseAggregate,g=5))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$FineAggregate,g=5))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=5))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=4))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=3))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=2))
plot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=2))
qplot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=2))
qplot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=3))
qplot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Age,g=4))
qplot(as.numeric(row.names(training[,-58])), training$CompressiveStrength, col=cut2(training$Age,g=4))
sapply(training, class)
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Age,g=4))
head(training[,-9])
qplot(as.numeric(row.names(training)), training$CompressiveStrength, col=cut2(training$Cement,g=4))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Age,g=4))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Age,g=3))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Age,g=6))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$FineAggregate,g=3))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$FineAggregate,g=5))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$CoarseAggregate,g=5))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$CoarseAggregate,g=3))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Superplasticizer,g=3))
training[,9]
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Water,g=3))
training$Age
summary(training$Age)
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$FlyAsh,g=3))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$FlyAsh,g=4))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag,g=3))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag,g=4))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Cement,g=4))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Cement,g=3))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Cement,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Age,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Cement,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$FlyAsh,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Water,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Superplasticizer,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$CoarseAggregate,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Age,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$FlyAsh,g=2))
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Age,g=2))
summary(training$Superplasticizer)
hist(training$Superplasticizer)
?dplyr
$dplayr
library(dplyr)
install.packages("dplyr")
library(dplyr)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$Cement,g=2))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
sapply(training, colnames)
training
adData
colnames(adData)
colnames(adData$predictors)
predictors
colnames(predictors)
colnames(diagnosis)
diagnosis
adData$Diagnosis
adData$diagnosis
grepl
training[ , grepl( "IL" , names( training ) ) ]
trainingIL = training[ , grepl( "IL" , names( training ) ) ]
head(trainingIL)
training$diagnosis
trainingIL[,diagnosis] <- training$diagnosis
trainingIL$diagnosis <- training$diagnosis
modelfit <- train(trainingIL$diagnosis ~.,method = "glm", preProcess="pca", data=trainingIL)
confusionMatrix(testing$diagnosis, predict(modelfit, testing))
trainingIL = training[ , grepl( "IL" , names( training ) ) ]
modelfit <- train(training$diagnosis ~.,method = "glm", preProcess="pca", data=trainingIL)
confusionMatrix(testing$diagnosis, predict(modelfit, testing))
prep <- preProcess(trainingIL, method="pca", thresh=.90)
prep
colnames(trainingIL)
trainingIL = training[ , grepl( "^IL" , names( training ) ) ]
colnames(trainingIL)
prep <- preProcess(trainingIL, method="pca", thresh=.90)
prep
trainingIL_D <- trainingIL
trainingIL_D$diagnosis <- training$diagnosis
colnames(trainingIL_D)
model1 <- train(diagnosis ~ ., method="glm", data=trainingIL_D)
model1
prep
colnames(trainingIL_D)
colnames(trainingIL_D[,-13])
trainingIL_D[,-13] + 1
head(trainingIL_D[,-13] + 1)
head(trainingIL_D[,-13])
train1 <- train(trainingIL_D~.,method="glm",data=training)
train1 <- train(trainingIL_D~.,method="glm",data=trainingIL_D)
trainingIL_D
train1 <- train(trainingIL_D~.,method="glm",data=trainingIL_D)
train1 <- train(trainingIL_D$diagnosis~.,method="glm",data=trainingID_D)
train1 <- train(trainingIL_D$diagnosis~.,method="glm",data=trainingIL_D)
train1 <- train(trainingIL_D$diagnosis~.,method="glm",data=training)
train1 <- train(trainingIL_D$diagnosis~.,method="glm",data=trainingIL_D)
prep2 <- preProcess(trainingIL, method="pca", thresh=.80)
prep2
model1 <- train(diagnosis ~ ., method="glm", data=trainingIL_D)
model1
modelFit1 <- train(diagnosis ~ ., method="glm", preProcess = "pca, thresh=.8", data=trainingIL_D)
modelFit1 <- train(diagnosis ~ ., method="glm", preProcess = "pca", thresh=.8, data=trainingIL_D)
warnings()
prep1
prep2
trainPC <- predict(prep2, trainingIL_D)
prep2 <- preProcess(trainingIL[,-13], method="pca", thresh=.80)
trainPC <- predict(prep2, trainingIL_D)
trainPC <- predict(prep2, trainingIL_D[,-13])
modelFit2 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainPC)
modelFit2
train1 <- train(trainingIL_D$diagnosis~.,method="glm",data=trainingIL_D)
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = train1)
train1
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
modelFit1
test1 <- predict(trainingIL_D, trainingIL_D[,-13])
?predict
predict(trainingIL_D)
predict(trainingIL_D$diagnosis)
predict(trainingIL_D$diagnosis, trainingIL_D[,-13])
predict(trainingIL_D, trainingIL_D[,-13])
colnames(testing)
predict(trainingIL_D, testingIL_D[,-1])
predict(prep1, testingIL_D[,-1])
predict(prep2, testingIL_D[,-1])
predict(prep2, testing[,-1])
testing2 <- testing[, grepl( "^IL" , names( testing ) ) ]]
testing2 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing2$diagnosis <- testing$diagnosis
colnames(testing2)
predict(prep2, testing2[,-13])
predictPC2 <- predict(prep2, testing2[,-13])
modelFit2
confusionMatrix(testing2$diagnosis, predict(modelFit2, predictPC2))
testing1 <0 testing[,grepl("~IL", names(testing))]
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
predictPC2 <- predict(testing1[,-13])
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method="glm", data = trainingIL_D)
modelFit1
predictPC2 <- predict(testing1, testing1[,-13])
prep2
predictPC1 <- predict(testing1$diagnosis, testing1[,-13])
confusionMatrix(testing2$diagnosis, predict(modelFit1)
)
predict(modelFit1)
predictPC2 <- predict(prep2, testing2[,-13])
confusionMatrix(testing2$diagnosis, predict(modelFit2, predictPC2))
confusionMatrix(testing2$diagnosis, predict(modelFit1, testing2)
)
trainingIL = training[ , grepl( "^IL" , names( training ) ) ]
prep <- preProcess(trainingIL, method="pca", thresh=.80)
prep
qplot(as.numeric(row.names(training[,-9])), training$CompressiveStrength, col=cut2(training$FlyAsh,g=2))
data(concrete)
set.seed(975)
inTrainConc=createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
trainingConc = mixtures[inTrainConc,]
testingConc = mixtures[-inTrainConc,]
qplot(as.numeric(row.names(trainingConc[,-9])), trainingConc$CompressiveStrength, col=cut2(trainingConc$FlyAsh,g=2))
qplot(as.numeric(row.names(trainingConc[,-9])), trainingConc$CompressiveStrength, col=cut2(trainingConc$FlyAsh,g=5))
qplot(as.numeric(row.names(trainingConc[,-9])), trainingConc$CompressiveStrength, col=cut2(trainingConc$Age,g=5))
summary(trainingConc$Superplasticizer)
cut2(trainingConc$Superplasticizer, g=4)
trainingConc$Superplasticizer
count(trainingConc$Superplasticizer == 0)
count(trainingConc$Superplasticizer = 0)
trainingConc$Superplasticizer
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
predictPC1 <- predict(testing1$diagnosis, testing1[,-13])
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method="glm", data = trainingIL_D)
confusionMatrix(testing2$diagnosis, predict(modelFit1, predictPC1))
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
predictPC1 <- predict(testing1$diagnosis, testing1[,-13])
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method="glm", data = trainingIL_D)
confusionMatrix(testing2$diagnosis, predict(modelFit1, predictPC1))
predict(trainingIL_D, trainingIL_D[,-13])
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method="glm", data = trainingIL_D)
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
predictPC1 <- predict(testing1$diagnosis, testing1[,-13])
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method="glm", data = trainingIL_D)
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1))
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
predictPC1 <- predict(testing1$diagnosis, testing1[,-13])
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method="glm", data = trainingIL_D)
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1))
confusionMatrix(testing1$diagnosis, predict(modelFit1, training1))
confusionMatrix(testing1$diagnosis, predict(modelFit1, trainingIL_D))
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1)
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1))
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segmentationOriginal
colnames(segmentationOriginal)
segmentationOriginal$Case
split(segmentationOriginal, segmentationOriginal$Case)
split(segmentationOriginal, segmentationOriginal$Case)$train
segmentationOriginal$Case
split(segmentationOriginal, segmentationOriginal$Case)$Train
trainSO <- split(segmentationOriginal, segmentationOriginal$Case)$Train
trainSO
colnames(trainSO)
trainSO$Case
testSO <- split(segmentationOriginal, segmentationOriginal$Case)$Test
colnames(trainSO)
install.packages("kml")
library(kml)
install.packages("tex")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL = training[ , grepl( "^IL" , names( training ) ) ]
prep <- preProcess(trainingIL, method="pca", thresh=.90)
prep
trainingIL_D <- trainingIL
trainingIL_D$diagnosis <- training$diagnosis
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1))
prep2 <- preProcess(trainingIL[,-13], method="pca", thresh=.80)
trainPC <- predict(prep2, trainingIL_D[,-13])
modelFit2 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainPC)
testing2 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing2$diagnosis <- testing$diagnosis
predictPC2 <- predict(prep2, testing2[,-13])
confusionMatrix(testing2$diagnosis, predict(modelFit2, predictPC2))
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github(ramnathv/slidify')
''
install_github('ramnathv/slidify')
install.packages("devtools")
library(devtools)
install_github('ramnathv/slidify')
sessionInfo()
devtools::install_github('ramnathv/slidify')
sessionInfo()
install.packages("devtools")
library(devtools)
devtools::install_github('ramnathv/slidify')
library(devtools)
library('devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidify')
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(trainingIL)
View(trainingIL)
trainingIL_D <- trainingIL
trainingIL_D$diagnosis <- training$diagnosis
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1))
#Use PCA
prep2 <- preProcess(trainingIL[,-13], method="pca", thresh=.80)
trainPC <- predict(prep2, trainingIL_D[,-13])
modelFit2 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainPC)
testing2 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing2$diagnosis <- testing$diagnosis
predictPC2 <- predict(prep2, testing2[,-13])
confusionMatrix(testing2$diagnosis, predict(modelFit2, predictPC2))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(concrete)
glimps(concrete)
glimpse(concrete)
a <- concrete[,"Superplasticizer"==0]
a
a
summary(a)
a <- concrete[,Superplasticizer==0]
a <- concrete$Superplasticizer == 0
a
concrete$Superplasticizer
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
çprep <- preProcess(trainingIL, method="pca", thresh=.90)
testing1 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing1$diagnosis <- testing$diagnosis
names(testing1)
trainingIL_D <- training1
training1 <- training[, grepl( "^IL" , names( training ) ) ]
training1$diagnosis <- training$diagnosis
trainingIL_D <- training1
modelFit1 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainingIL_D)
confusionMatrix(testing1$diagnosis, predict(modelFit1, testing1))
trainingIL_D[,13]
training$diagnosis
prep2 <- preProcess(trainingIL[,-13], method="pca", thresh=.80)
trainPC <- predict(prep2, trainingIL_D[,-13])
modelFit2 <- train(trainingIL_D$diagnosis ~ ., method = "glm", data = trainPC)
testing2 <- testing[, grepl( "^IL" , names( testing ) ) ]
testing2$diagnosis <- testing$diagnosis
predictPC2 <- predict(prep2, testing2[,-13])
confusionMatrix(testing2$diagnosis, predict(modelFit2, predictPC2))
install.packages("ElemStatLearn")
install.packages("pgmm")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training <- subset(segmentationOriginal,Case=="Train")
testing <- subset(segmentationOriginal,Case=="Test")
set.seed(125)
modFitRPart<-train(Class~.,method="rpart",data=training)
p <- predict(modFitRPart, newdata = testing)
testingPredCorrect <- p == testing$Class
table(p, testing$Class)
names(testing)
print(p)
print(p$finalModel)
names(p)
print(modFitRPart)
summary(modFitRPart)
print(p$finalModel)
print(p)
print(p$finalmodel)
print(modFitRPart$finalModel)
print(modFitRPart)
p
class(p)
testingPredCorrect
table(p, testing$Class)
print modFitRPart$finalModel)
print(modFitRPart$finalModel)
fancyRPlot(modFit)
fancyRPartPlot
fancyRPartPlot(modFit)
install.packages("FancyRPartPlot")
install.packages("rattle")
fancyRPartPlot(modFit)
library(rattle)
fancyRPartPlot(modFit)
fancyRpartPlot(modFit)
fancyRpartPlot(modFitRPart)
fancyRpartPlot(modFitRPart$finalModel)
rattle()
mlazoZ1ncz1nc
install.packages("xtable")
rsconnect::setAccountInfo(name='mlazo', token='478FDDDBCE9913744882F58A4DAEB7E6', secret='Y2BMwgZyGSksRJdMEdSEdlsNc0UeoNEhMu7AEHXQ')
library(devtools)
deployApp()
library(shinyapps)
library(shinyapp)
library(shiny)
deployApp()
library(rsconnect)
runApp()
shiny::runApp('myShinyApp')
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
